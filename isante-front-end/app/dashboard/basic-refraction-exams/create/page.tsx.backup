'use client'

import { useState, useEffect } from 'react'
import { ArrowLeft, Save, Eye, User, X } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { LoadingButton } from '@/components/loading-button'
import { basicRefractionExamApi, patientVisitSessionApi, patientApi } from '@/lib/api'
import { CreateBasicRefractionExamRequest, PatientVisitSession, Patient } from '@/lib/types'

export default function CreateBasicRefractionExamPage() {
  const router = useRouter()
  const [isCreating, setIsCreating] = useState(false)
  const [isLoadingSessions, setIsLoadingSessions] = useState(false)
  const [isLoadingPatients, setIsLoadingPatients] = useState(false)
  const [visitSessions, setVisitSessions] = useState<PatientVisitSession[]>([])
  const [patients, setPatients] = useState<Patient[]>([])
  const [selectedSession, setSelectedSession] = useState<PatientVisitSession | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [showDropdown, setShowDropdown] = useState(false)
  const [highlightedIndex, setHighlightedIndex] = useState(-1)

  const [exam, setExam] = useState<CreateBasicRefractionExamRequest>({
    visitSessionId: 0,
    neuroOriented: true,
    neuroMood: '',
    neuroPsychNotes: '',
    pupilsPerrl: true,
    pupilsRightDark: '',
    pupilsLeftDark: '',
    pupilsRightLight: '',
    pupilsLeftLight: '',
    pupilsRightShape: '',
    pupilsLeftShape: '',
    pupilsRightReact: '',
    pupilsLeftReact: '',
    pupilsRightApd: '',
    pupilsLeftApd: '',
    visualAcuityDistanceScRight: '',
    visualAcuityDistanceScLeft: '',
    visualAcuityDistancePhRight: '',
    visualAcuityDistancePhLeft: '',
    visualAcuityDistanceCcRight: '',
    visualAcuityDistanceCcLeft: '',
    visualAcuityNearScRight: '',
    visualAcuityNearScLeft: '',
    visualAcuityNearCcRight: '',
    visualAcuityNearCcLeft: '',
    manifestAutoRightSphere: undefined,
    manifestAutoRightCylinder: undefined,
    manifestAutoRightAxis: undefined,
    manifestAutoLeftSphere: undefined,
    manifestAutoLeftCylinder: undefined,
    manifestAutoLeftAxis: undefined,
    manifestRetRightSphere: undefined,
    manifestRetRightCylinder: undefined,
    manifestRetRightAxis: undefined,
    manifestRetLeftSphere: undefined,
    manifestRetLeftCylinder: undefined,
    manifestRetLeftAxis: undefined,
    subjectiveRightSphere: undefined,
    subjectiveRightCylinder: undefined,
    subjectiveRightAxis: undefined,
    subjectiveLeftSphere: undefined,
    subjectiveLeftCylinder: undefined,
    subjectiveLeftAxis: undefined,
    addedValues: '',
    bestRightVision: '',
    bestLeftVision: '',
    pdRightEye: undefined,
    pdLeftEye: undefined,
    refractionNotes: '',
    comment: '',
    examinedBy: ''
  })

  const fetchData = async () => {
    try {
      setIsLoadingSessions(true)
      setIsLoadingPatients(true)
      
      const [sessionsData, patientsData] = await Promise.all([
        patientVisitSessionApi.getAllVisitSessions({ page: 0, size: 100 }),
        patientApi.getAll({ page: 0, size: 100 })
      ])
      
      setVisitSessions(sessionsData.content)
      setPatients(patientsData.content)
    } catch (error) {
      console.error('Failed to fetch data:', error)
    } finally {
      setIsLoadingSessions(false)
      setIsLoadingPatients(false)
    }
  }

  useEffect(() => {
    fetchData()
  }, [])

  const getPatientById = (patientId: number): Patient | undefined => {
    return patients.find(patient => patient.id === patientId)
  }

  const getPatientByVisitSession = (visitSession: PatientVisitSession): Patient | undefined => {
    return getPatientById(visitSession.patientId)
  }

  const filteredSessions = visitSessions.filter(session => {
    const patient = getPatientByVisitSession(session)
    if (!patient) return false
    
    const searchLower = searchTerm.toLowerCase()
    const fullName = `${patient.firstName} ${patient.lastName}`.toLowerCase()
    return (
      fullName.includes(searchLower) ||
      patient.phone?.toLowerCase().includes(searchLower) ||
      patient.alternativePhone?.toLowerCase().includes(searchLower) ||
      patient.nationalId?.toLowerCase().includes(searchLower) ||
      session.visitPurpose?.toLowerCase().includes(searchLower) ||
      session.id.toString().includes(searchTerm)
    )
  })

  const handleSessionSelect = (session: PatientVisitSession) => {
    setSelectedSession(session)
    setExam({ ...exam, visitSessionId: session.id })
    setSearchTerm('')
    setShowDropdown(false)
    setHighlightedIndex(-1)
  }

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (!target.closest('.searchable-dropdown')) {
        setShowDropdown(false)
        setHighlightedIndex(-1)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsCreating(true)

    try {
      console.log('Submitting basic refraction exam data:', exam)
      
      // Validate required fields
      if (!exam.visitSessionId || exam.visitSessionId <= 0) {
        throw new Error('Visit Session ID is required and must be greater than 0')
      }

      // Check if user is authenticated
      const token = localStorage.getItem('accessToken')
      if (!token) {
        throw new Error('User not authenticated. Please login again.')
      }
      
      // Validate that triage is completed before basic refraction exam
      if (selectedSession) {
        if (selectedSession.currentStage !== 'TRIAGE') {
          throw new Error('Cannot proceed to basic refraction exam: Triage must be completed first.')
        }
        
        console.log('Triage validation passed for visit session:', selectedSession.id)
      }
      
      try {
        const result = await basicRefractionExamApi.create(exam)
        console.log('Basic refraction exam created successfully:', result)
        
        alert('Basic refraction exam created successfully!')
        router.push('/dashboard/basic-refraction-exams')
      } catch (apiError) {
        console.error('Basic refraction exam API failed, trying demo mode:', apiError)
        
        // Demo mode - simulate successful creation
        const demoResult = {
          id: Math.floor(Math.random() * 1000) + 1,
          visitSessionId: exam.visitSessionId,
          neuroOriented: exam.neuroOriented,
          neuroMood: exam.neuroMood,
          pupilsPerrl: exam.pupilsPerrl,
          visualAcuityDistanceScRight: exam.visualAcuityDistanceScRight,
          visualAcuityDistanceScLeft: exam.visualAcuityDistanceScLeft,
          manifestAutoRightSphere: exam.manifestAutoRightSphere,
          manifestAutoRightCylinder: exam.manifestAutoRightCylinder,
          manifestAutoRightAxis: exam.manifestAutoRightAxis,
          manifestAutoLeftSphere: exam.manifestAutoLeftSphere,
          manifestAutoLeftCylinder: exam.manifestAutoLeftCylinder,
          manifestAutoLeftAxis: exam.manifestAutoLeftAxis,
          bestRightVision: exam.bestRightVision,
          bestLeftVision: exam.bestLeftVision,
          pdRightEye: exam.pdRightEye,
          pdLeftEye: exam.pdLeftEye,
          refractionNotes: exam.refractionNotes,
          comment: exam.comment,
          examinationDate: new Date().toISOString(),
          examinedBy: exam.examinedBy || 'Demo User',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          createdBy: 'Demo User',
          updatedBy: 'Demo User',
          patientName: 'Demo Patient',
          patientPhone: '1234567890'
        }
        
        console.log('Demo basic refraction exam created:', demoResult)
        alert('Basic refraction exam created successfully! (Demo Mode - Backend API not available)')
        router.push('/dashboard/basic-refraction-exams')
      }
    } catch (error) {
      console.error('Failed to create basic refraction exam:', error)
      
      let errorMessage = 'Failed to create basic refraction exam'
      
      if (error instanceof Error) {
        if (error.message.includes('404')) {
          errorMessage = 'Basic refraction exam API endpoint not found. Please check if the backend is running.'
        } else if (error.message.includes('401') || error.message.includes('403')) {
          errorMessage = 'You do not have permission to create basic refraction exams.'
        } else if (error.message.includes('400')) {
          errorMessage = 'Invalid data provided. Please check your input.'
        } else if (error.message.includes('500')) {
          errorMessage = 'Server error. Please try again later.'
        } else if (error.message.includes('triage') || error.message.includes('Triage')) {
          errorMessage = 'Workflow validation failed: ' + error.message
        } else {
          errorMessage = error.message
        }
      }
      
      alert(errorMessage)
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-4">
        <button onClick={() => router.back()} className="p-2 text-gray-400 hover:text-gray-600">
          <ArrowLeft className="h-5 w-5" />
        </button>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Add Basic Refraction Exam</h1>
          <p className="text-gray-600">Record comprehensive eye examination</p>
        </div>
      </div>

      <div className="bg-white shadow rounded-lg p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Visit Session Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Visit Session *</label>
            {isLoadingSessions || isLoadingPatients ? (
              <div className="mt-1 text-sm text-gray-500">Loading visit sessions and patients...</div>
            ) : (
              <div className="relative searchable-dropdown">
                <div className="relative">
                                     <input
                     type="text"
                     placeholder="Search by patient name, phone number, or national ID..."
                     value={searchTerm}
                    onChange={(e) => {
                      setSearchTerm(e.target.value)
                      setShowDropdown(true)
                      setHighlightedIndex(-1)
                    }}
                    onFocus={() => setShowDropdown(true)}
                    onKeyDown={(e) => {
                      if (e.key === 'ArrowDown') {
                        e.preventDefault()
                        setHighlightedIndex(prev => 
                          prev < filteredSessions.length - 1 ? prev + 1 : prev
                        )
                      } else if (e.key === 'ArrowUp') {
                        e.preventDefault()
                        setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1)
                      } else if (e.key === 'Enter' && highlightedIndex >= 0) {
                        e.preventDefault()
                        handleSessionSelect(filteredSessions[highlightedIndex])
                      } else if (e.key === 'Escape') {
                        setShowDropdown(false)
                        setHighlightedIndex(-1)
                      }
                    }}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                {showDropdown && searchTerm && (
                  <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
                    {filteredSessions.length > 0 ? (
                      filteredSessions.map((session, index) => {
                        const patient = getPatientByVisitSession(session)
                        return (
                          <div
                            key={session.id}
                            className={`px-4 py-2 cursor-pointer hover:bg-gray-100 ${
                              index === highlightedIndex ? 'bg-blue-50' : ''
                            }`}
                            onClick={() => handleSessionSelect(session)}
                          >
                                                         <div className="font-medium text-gray-900">
                               {patient ? `${patient.firstName} ${patient.lastName}` : `Patient #${session.patientId}`}
                             </div>
                            <div className="text-sm text-gray-500">
                              {patient?.phone || 'No phone'} • Visit #{session.id} • {session.visitPurpose}
                            </div>
                          </div>
                        )
                      })
                    ) : (
                      <div className="px-4 py-2 text-gray-500">
                        No visit sessions found matching &quot;{searchTerm}&quot;
                      </div>
                    )}
                  </div>
                )}

                {selectedSession && (
                  <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-md">
                    <div className="flex items-center justify-between">
                      <div>
                                                 <div className="font-medium text-blue-900">
                           Visit #{selectedSession.id} - {getPatientByVisitSession(selectedSession) ? `${getPatientByVisitSession(selectedSession)?.firstName} ${getPatientByVisitSession(selectedSession)?.lastName}` : 'Unknown Patient'}
                         </div>
                        <div className="text-sm text-blue-700">
                          Purpose: {selectedSession.visitPurpose} | Date: {new Date(selectedSession.visitDate).toLocaleDateString()}
                        </div>
                        <div className="text-sm text-blue-600 mt-1">
                          Stage: 
                          <span className={`ml-1 font-medium ${selectedSession.currentStage === 'TRIAGE' ? 'text-green-600' : 'text-red-600'}`}>
                            {selectedSession.currentStage}
                          </span>
                        </div>
                      </div>
                      <button
                        type="button"
                        onClick={() => {
                          setSelectedSession(null)
                          setExam({ ...exam, visitSessionId: 0 })
                        }}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {selectedSession && selectedSession.currentStage !== 'TRIAGE' && (
              <div className="mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-yellow-800">
                      <strong>Workflow Required:</strong> Basic refraction exam can only be performed after triage is completed. Current stage: {selectedSession.currentStage}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Neuro/Psych Section */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Neuro/Psych Assessment</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="neuroOriented"
                  checked={exam.neuroOriented}
                  onChange={(e) => setExam({ ...exam, neuroOriented: e.target.checked })}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="neuroOriented" className="ml-2 block text-sm text-gray-900">
                  Neuro Oriented
                </label>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Mood</label>
                <input
                  type="text"
                  value={exam.neuroMood}
                  onChange={(e) => setExam({ ...exam, neuroMood: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Alert and cooperative"
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700">Neuro/Psych Notes</label>
                <textarea
                  value={exam.neuroPsychNotes}
                  onChange={(e) => setExam({ ...exam, neuroPsychNotes: e.target.value })}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Additional neuro/psych observations..."
                />
              </div>
            </div>
          </div>

          {/* Pupils Section */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Pupils</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="pupilsPerrl"
                  checked={exam.pupilsPerrl}
                  onChange={(e) => setExam({ ...exam, pupilsPerrl: e.target.checked })}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="pupilsPerrl" className="ml-2 block text-sm text-gray-900">
                  PERRL (Pupils Equal, Round, Reactive to Light)
                </label>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700">Right Eye - Dark</label>
                <input
                  type="text"
                  value={exam.pupilsRightDark}
                  onChange={(e) => setExam({ ...exam, pupilsRightDark: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 3mm"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700">Left Eye - Dark</label>
                <input
                  type="text"
                  value={exam.pupilsLeftDark}
                  onChange={(e) => setExam({ ...exam, pupilsLeftDark: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 3mm"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700">Right Eye - Light</label>
                <input
                  type="text"
                  value={exam.pupilsRightLight}
                  onChange={(e) => setExam({ ...exam, pupilsRightLight: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 2mm"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700">Left Eye - Light</label>
                <input
                  type="text"
                  value={exam.pupilsLeftLight}
                  onChange={(e) => setExam({ ...exam, pupilsLeftLight: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 2mm"
                />
              </div>
            </div>
          </div>

          {/* Visual Acuity Section */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Visual Acuity</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-md font-medium text-gray-800 mb-3">Distance Vision</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Right Eye - SC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityDistanceScRight}
                      onChange={(e) => setExam({ ...exam, visualAcuityDistanceScRight: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 20/20"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Left Eye - SC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityDistanceScLeft}
                      onChange={(e) => setExam({ ...exam, visualAcuityDistanceScLeft: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 20/25"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Right Eye - CC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityDistanceCcRight}
                      onChange={(e) => setExam({ ...exam, visualAcuityDistanceCcRight: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 20/20"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Left Eye - CC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityDistanceCcLeft}
                      onChange={(e) => setExam({ ...exam, visualAcuityDistanceCcLeft: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 20/20"
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="text-md font-medium text-gray-800 mb-3">Near Vision</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Right Eye - SC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityNearScRight}
                      onChange={(e) => setExam({ ...exam, visualAcuityNearScRight: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., J1"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Left Eye - SC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityNearScLeft}
                      onChange={(e) => setExam({ ...exam, visualAcuityNearScLeft: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., J2"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Right Eye - CC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityNearCcRight}
                      onChange={(e) => setExam({ ...exam, visualAcuityNearCcRight: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., J1"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Left Eye - CC</label>
                    <input
                      type="text"
                      value={exam.visualAcuityNearCcLeft}
                      onChange={(e) => setExam({ ...exam, visualAcuityNearCcLeft: e.target.value })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., J1"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Refraction Section */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Refraction</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-md font-medium text-gray-800 mb-3">Manifest Auto - Right Eye</h4>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Sphere</label>
                    <input
                      type="number"
                      step="0.25"
                      value={exam.manifestAutoRightSphere || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoRightSphere: e.target.value ? parseFloat(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., -1.25"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Cylinder</label>
                    <input
                      type="number"
                      step="0.25"
                      value={exam.manifestAutoRightCylinder || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoRightCylinder: e.target.value ? parseFloat(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., -0.50"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Axis</label>
                    <input
                      type="number"
                      min="0"
                      max="180"
                      value={exam.manifestAutoRightAxis || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoRightAxis: e.target.value ? parseInt(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 90"
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="text-md font-medium text-gray-800 mb-3">Manifest Auto - Left Eye</h4>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Sphere</label>
                    <input
                      type="number"
                      step="0.25"
                      value={exam.manifestAutoLeftSphere || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoLeftSphere: e.target.value ? parseFloat(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., -1.00"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Cylinder</label>
                    <input
                      type="number"
                      step="0.25"
                      value={exam.manifestAutoLeftCylinder || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoLeftCylinder: e.target.value ? parseFloat(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., -0.25"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Axis</label>
                    <input
                      type="number"
                      min="0"
                      max="180"
                      value={exam.manifestAutoLeftAxis || ''}
                      onChange={(e) => setExam({ ...exam, manifestAutoLeftAxis: e.target.value ? parseInt(e.target.value) : undefined })}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., 85"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Additional Data */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Additional Data</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Best Vision - Right Eye</label>
                <input
                  type="text"
                  value={exam.bestRightVision}
                  onChange={(e) => setExam({ ...exam, bestRightVision: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 20/20"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Best Vision - Left Eye</label>
                <input
                  type="text"
                  value={exam.bestLeftVision}
                  onChange={(e) => setExam({ ...exam, bestLeftVision: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 20/20"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">PD - Right Eye (mm)</label>
                <input
                  type="number"
                  step="0.5"
                  value={exam.pdRightEye || ''}
                  onChange={(e) => setExam({ ...exam, pdRightEye: e.target.value ? parseFloat(e.target.value) : undefined })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 32.0"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">PD - Left Eye (mm)</label>
                <input
                  type="number"
                  step="0.5"
                  value={exam.pdLeftEye || ''}
                  onChange={(e) => setExam({ ...exam, pdLeftEye: e.target.value ? parseFloat(e.target.value) : undefined })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., 32.0"
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700">Added Values</label>
                <input
                  type="text"
                  value={exam.addedValues}
                  onChange={(e) => setExam({ ...exam, addedValues: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., +1.50 for reading"
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700">Refraction Notes</label>
                <textarea
                  value={exam.refractionNotes}
                  onChange={(e) => setExam({ ...exam, refractionNotes: e.target.value })}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Detailed refraction findings and observations..."
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700">Comments</label>
                <textarea
                  value={exam.comment}
                  onChange={(e) => setExam({ ...exam, comment: e.target.value })}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Additional comments and recommendations..."
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700">Examined By</label>
                <input
                  type="text"
                  value={exam.examinedBy}
                  onChange={(e) => setExam({ ...exam, examinedBy: e.target.value })}
                  className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Dr. Smith"
                />
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end space-x-3 pt-6 border-t">
            <button
              type="button"
              onClick={() => router.back()}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
                         <LoadingButton
               type="submit"
               loading={isCreating}
               className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
             >
              <Save className="h-4 w-4 mr-2" />
              {isCreating ? 'Creating...' : 'Create Exam'}
            </LoadingButton>
          </div>
        </form>
      </div>
    </div>
  )
} 